#include <stdio.h>
#include <limits.h>

#define N 4  // Number of cities

int graph[N][N] = {
    {0, 10, 15, 20},
    {10, 0, 35, 25},
    {15, 35, 0, 30},
    {20, 25, 30, 0}
};

int min(int a, int b) {
    return (a < b) ? a : b;
}

int calculateTotalDistance(int path[]) {
    int distance = 0;
    for (int i = 0; i < N - 1; i++) {
        distance += graph[path[i]][path[i + 1]];
    }
    distance += graph[path[N - 1]][path[0]];  // Return to starting city
    return distance;
}

void tspBruteForce(int path[], int currCity, int level, int* minDistance, int minPath[]) {
    if (level == N - 1) {
        int totalDistance = calculateTotalDistance(path);
        if (totalDistance < *minDistance) {
            *minDistance = totalDistance;
            for (int i = 0; i < N; i++) {
                minPath[i] = path[i];
            }
        }
        return;
    }

    for (int i = 1; i < N; i++) {
        if (path[i] == -1) {
            path[i] = currCity;
            tspBruteForce(path, i, level + 1, minDistance, minPath);
            path[i] = -1;
        }
    }
}

int main() {
    int path[N];
    for (int i = 0; i < N; i++) {
        path[i] = -1;
    }
    path[0] = 0;  // Starting city

    int minDistance = INT_MAX;
    int minPath[N];

    tspBruteForce(path, 0, 0, &minDistance, minPath);

    printf("Minimum Distance: %d\n", minDistance);
    printf("Optimal Path: ");
    for (int i = 0; i < N; i++) {
        printf("%d -> ", minPath[i]);
    }
    printf("%d\n", minPath[0]);

    return 0;
}
